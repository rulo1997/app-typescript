version: '3.8'

services:
  # --- NUEVO SERVICIO PARA NUESTRA API ---
  api:
    container_name: ecommerce-api
    # 'build: .' le dice a Compose que construya una imagen usando el Dockerfile en el directorio actual
    build: .
    ports:
      - "3000:3000"
    environment:
      # Aseguramos que el entorno sea de desarrollo
      - NODE_ENV=development
    # 'env_file' carga las variables desde nuestro archivo .env al contenedor
    env_file:
      - .env
    volumes:
      # Sincroniza nuestro código local con el del contenedor para hot-reloading
      - ./:/app
      # "Esconde" la carpeta node_modules local para usar la que se instaló dentro del contenedor
      - /app/node_modules
    # 'depends_on' asegura que la base de datos y el caché se inicien ANTES que nuestra API
    command: npm run dev
    depends_on:
      - db
      - cache

  # --- 2. NUEVO SERVICIO PARA EL WORKER ---
  worker:
    container_name: ecommerce-worker
    # Usa la misma imagen que la API, no necesita reconstruir
    build: .
    env_file:
      - .env
    volumes:
      - ./:/app
      - /app/node_modules
    # La única diferencia clave: el comando que ejecuta
    command: npm run worker
    depends_on:
      - db
      - cache

  db:
    image: mysql:8.0
    container_name: ecommerce-mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Lee desde el .env
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql

  cache:
    image: redis:6.2-alpine
    container_name: ecommerce-redis-cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

volumes:
  mysql-data:
  redis-data: